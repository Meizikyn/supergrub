#!/bin/bash
# Super Grub Disk - grub-build-006-secureboot
# Copyright (C) 2019  Adrian Gibanel Lopez.
#
# Super Grub Disk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Super Grub Disk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Super Grub Disk.  If not, see <http://www.gnu.org/licenses/>.

# Configure gfxterm, but allow it to be disabled by holding shift during boot.
# gfxterm is required to display non-ASCII translations.

# Grub2 Build for Super Grub2 Disk - Prepare build dir

SG2D_DIR="$(pwd)"
TMP_SECUREBOOT_DOWNLOAD_DIR=$(mktemp -d)
SECUREBOOT_BINARIES_DIR="${SG2D_DIR}/secureboot-binaries"

# aptitude check

if aptitude --version > /dev/null 2>&1 ; then
	:
else
	echo -e -n "Aptitude was not found. Aptitude is needed\n";
	echo -e -n "Aborting\n";
	exit 3

fi

# dpkg-deb check

if dpkg-deb --version > /dev/null 2>&1 ; then
	:
else
	echo -e -n "Dpkg-deb was not found. Dpkg-deb is needed\n";
	echo -e -n "Aborting\n";
	exit 3

fi

source grub-build-config

# Empty secureboot binaries
if [ -d "${SECUREBOOT_BINARIES_DIR}" ] ; then
	rm -rf "${SECUREBOOT_BINARIES_DIR}"
fi
mkdir "${SECUREBOOT_BINARIES_DIR}"



# Temp directory for downloading binaries
if [ -d "${TMP_SECUREBOOT_DOWNLOAD_DIR}" ] ; then
	rm -rf "${TMP_SECUREBOOT_DOWNLOAD_DIR}"
fi
mkdir "${TMP_SECUREBOOT_DOWNLOAD_DIR}"

PRE_DOWNLOAD_DIR="$(pwd)"
cd "${TMP_SECUREBOOT_DOWNLOAD_DIR}"
aptitude download grub-efi-amd64-signed:amd64
aptitude download grub-efi-ia32-signed:i386
aptitude download shim-signed:i386
aptitude download shim-signed:amd64
for ndeb in *deb ; do
	dpkg-deb -x "${ndeb}" .
done
# ./usr/lib/grub/i386-efi-signed/grubnetia32-installer.efi.signed
# ./usr/lib/grub/i386-efi-signed/gcdia32.efi.signed
# ./usr/lib/grub/i386-efi-signed/grubnetia32.efi.signed
# ./usr/lib/grub/i386-efi-signed/grubia32.efi.signed
# ./usr/lib/grub/x86_64-efi-signed/grubnetx64.efi.signed
# ./usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed
# ./usr/lib/grub/x86_64-efi-signed/gcdx64.efi.signed
# ./usr/lib/grub/x86_64-efi-signed/grubnetx64-installer.efi.signed
# ./usr/lib/shim/shimx64.efi.signed
# ./usr/lib/shim/shimia32.efi.signed
cd "${PRE_DOWNLOAD_DIR}"

for nfile in ./usr/lib/grub/i386-efi-signed/gcdia32.efi.signed ./usr/lib/grub/x86_64-efi-signed/gcdx64.efi.signed ./usr/lib/shim/shimx64.efi.signed ./usr/lib/shim/shimia32.efi.signed ; do
	if cp -a "${TMP_SECUREBOOT_DOWNLOAD_DIR}"/${nfile} "${SECUREBOOT_BINARIES_DIR}/" ; then
		:
	else
		echo -e -n "Something went wrong when running:\n"
		echo -e -n "cp -a '${TMP_SECUREBOOT_DOWNLOAD_DIR}/${nfile}' '${SECUREBOOT_BINARIES_DIR}/'\n"
		echo -e -n "Aborting\n"
		exit 4
	fi
done

# Remove Temp directory for downloading binaries

rm -rf "${TMP_SECUREBOOT_DOWNLOAD_DIR}"


cd "${SG2D_DIR}"
